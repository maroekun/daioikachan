#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
require 'rubygems' unless defined?(gem)
ROOT = File.expand_path('..', File.dirname(__FILE__))
$LOAD_PATH << File.expand_path(File.join(ROOT, 'lib'))

require 'dotenv'
Dotenv.load

# tweak default_options
require 'fluent/supervisor'
class Fluent::Supervisor
  class << self
    alias :fluentd_default_options :default_options
  end
  def self.default_options
    fluentd_default_options.merge({
      :config_path => 'daioikachan.conf',
      :plugin_dirs => [File.join(ROOT, 'lib/fluent/plugin')],
    })
  end
end

# handle argv to generate conf
require 'optparse'
opts = {}
opt = OptionParser.new
opt.on('-g', "--generate PATH", "generate a sample configuration file") {|s|
  opts[:generate_path] = s
}
begin
  opt.parse!(ARGV)
rescue OptionParser::InvalidOption => e
  ARGV = e.args + ARGV # restore and ignore unknown options to pass to Fluentd
end

if generate_path = opts[:generate_path]
  require 'fileutils'
  FileUtils.mkdir_p File.dirname(generate_path)
  if File.exist?(generate_path)
    puts "#{generate_path} already exists."
  else
    File.open(generate_path, "w") {|f|
      conf = File.read File.join(ROOT, 'daioikachan.conf')
      f.write conf
    }
    puts "Installed #{generate_path}."
  end
  exit 0
end

require 'fluent/command/fluentd'
